#!/usr/bin/env ruby
require 'time'
require 'csv'

# TODO: This method is currently timezone-aware
# but not Daylight Savings Time-aware. Future work could include
# using ActiveSupport::TimeZone, or possibly the gem TZInfo
def convert_time_to_iso_8601(timestamp)
  timestamp = timestamp += " -08:00"
  new_timestamp = DateTime.strptime(timestamp, '%m/%e/%y %r %:z')
  rezoned_timestamp = new_timestamp.new_offset('-05:00')
  rezoned_timestamp.iso8601.to_s
end

def convert_zipcode(zipcode)
  if zipcode.length < 5
    num_of_zeroes = 5 - zipcode.length
    num_of_zeroes.times do
      zipcode = "0" + zipcode
    end
  end
  zipcode
end

def convert_fullname(fullname)
  fullname.upcase
end

def validate_text(text)
  unless text.nil?
    text = text.encode("UTF-8", undef: :replace, invalid: :replace, replace: 'ï¿½')
  end
  text
end

def calculate_seconds_from_hours(num)
  calculate_seconds_from_minutes(num) * 60
end

def calculate_seconds_from_minutes(num)
  num * 60
end

def calculate_total_seconds(duration_string)
  duration_array = duration_string.split(":").map(&:to_f)
  seconds_hours = calculate_seconds_from_hours(duration_array[0])
  seconds_minutes = calculate_seconds_from_minutes(duration_array[1])
  seconds = duration_array[2]
  total_seconds = seconds_hours + seconds_minutes + seconds
end

def get_total_duration(foo_duration, bar_duration)
  foo_duration + bar_duration
end

def parse_csv(input_file)
  csv_string = CSV.generate do |output_csv|
    output_csv << ["Timestamp", "Address", "ZIP", "FullName", "FooDuration", "BarDuration", "TotalDuration", "Notes"]
    CSV.parse(input_file, headers: true) do |row|
      row.each do |header, value|
        row[header] = validate_text(value)
      end
      # STILL NEED TIMEZONE
      begin
        normalized_timestamp = convert_time_to_iso_8601(row["Timestamp"])
        normalized_address = row["Address"]
        normalized_zip = convert_zipcode(row["ZIP"])
        normalized_fullname = convert_fullname(row["FullName"])
        normalized_foo_duration = calculate_total_seconds(row["FooDuration"])
        normalized_bar_duration = calculate_total_seconds(row["BarDuration"])
        normalized_total_duration = normalized_foo_duration + normalized_bar_duration
        new_row = [
          normalized_timestamp,
          normalized_address,
          normalized_zip,
          normalized_fullname,
          normalized_foo_duration.to_s,
          normalized_bar_duration.to_s,
          normalized_total_duration.to_s,
          row["Notes"]
        ]
        output_csv << new_row
      rescue StandardError => e
        STDERR.puts "failure parsing row; error is #{e}"
      end
    end
  end
  puts csv_string
end

parse_csv($stdin.read)
